// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model logs {
  id   String  @id @default(cuid())
  text String? @db.VarChar(1024)
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id          String  @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password     String @db.VarChar(1024)
  accounts      Account[]
  sessions      Session[]
  role          Role    @default(USER)
  createdServerConfigs ServerConfig[] @relation("createdBy")
  userserverConfigs  UserServerConfig[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  STAFF
}

model ServerConfig {
 id String  @id @default(cuid())
 basePath String
 hospitalName String @unique
 userId String
 providerId String?
 providerName String?
 locationUuid String?
 locationTag String?
 childLocations ChildLocation[]
 username String @default("admin")
 password String @default("Admin123")
 createdBy User @relation("createdBy", fields: [userId], references: [id])
 userServerConfigs UserServerConfig[]
}

model ChildLocation {
  id String  @id @default(cuid())
  name String
  uuid String
  parentLocationName String
  serverConfig ServerConfig @relation(fields: [parentLocationName], references: [hospitalName], onDelete: Cascade)
}

model UserServerConfig {
  id             String      @id @default(cuid())
  userId         String
  serverConfigId String
  username       String
  userUUID       String
  locationUUID   String
  password       String
  personUUID     String?
  providerUUID   String?
  user           User    @relation(fields: [userId], references: [id])
  serverConfig   ServerConfig @relation(fields: [serverConfigId], references: [id])
  @@index([userId], name: "userId")
  @@index([serverConfigId], name: "serverConfigId")
  @@unique([userId, serverConfigId])
}

